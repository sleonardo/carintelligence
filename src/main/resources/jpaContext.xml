<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <context:annotation-config />
    <context:component-scan base-package="com.carintelligence" />
    
    <!-- Replaces $ variables in applicationContext.xml with appropriate values 
     from the environment file root.properties is only used to enumerate the keys 
     - the values are read from the machine specific environment file -->
    <bean class="com.carintelligence.util.EnvPropertyPlaceholderConfigurer">
        <property name="location" value="classpath:root.properties" />
    </bean>

    <!-- This bean tells the spring to support context bean annotation. -->
    <bean
        class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />


    <bean id="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="punit" />
        <property name="dataSource" ref="datasource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="true" />
            </bean>
        </property>
        <!-- JPA vendor properties: specific to Hibernate, in our case -->
        <property name="jpaPropertyMap">
            <map>
                <entry key="hibernate.dialect" value="${hibernate.dialect}" />
                <entry key="hibernate.hbm2ddl.auto" value="${hibernate.hbm2ddl.auto}"></entry>
                <entry key="hibernate.format_sql" value="${hibernate.format_sql}"></entry>
            </map>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.enable_lazy_load_no_trans">true</prop>
            </props>
        </property>
    </bean>


    <!-- Makes the transaction manager available for us to use in our application. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.jpa.vendor.HibernateJpaSessionFactoryBean">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
        <!-- Are there any other properties required? -->
    </bean>

    <!-- Instruct spring that we would like to use annotations to start and 
        rollback the transaction. -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- Configure datasource: All the database related properties go here. -->
    <bean id="datasource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${datasource.driverClassName}" />
        <property name="url" value="${datasource.url}" />
        <property name="username" value="${datasource.username}" />
        <property name="password" value="${datasource.password}" />
    </bean>
    
    <beans profile="test">
	    <bean id="datasource"
	        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	        <property name="driverClassName" value="org.hsqldb.jdbcDriver" />
	        <property name="url" value="jdbc:hsqldb:mem:testdb" />
	        <property name="username" value="" />
	        <property name="password" value="" />
	    </bean>
	    <bean id="entityManagerFactory"
	        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	        <property name="persistenceUnitName" value="punit" />
	        <property name="dataSource" ref="datasource" />
	        <property name="jpaVendorAdapter">
	            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
	                <property name="showSql" value="true" />
	            </bean>
	        </property>
	        <!-- JPA vendor properties: specific to Hibernate, in our case -->
	        <property name="jpaPropertyMap">
	            <map>
	                <entry key="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect" />
	                <entry key="hibernate.hbm2ddl.auto" value="update"></entry>
	                <entry key="hibernate.format_sql" value="true"></entry>
	            </map>
	        </property>
	        <property name="jpaProperties">
	            <props>
	                <prop key="hibernate.enable_lazy_load_no_trans">true</prop>
	            </props>
	        </property>
	    </bean>	    
    </beans>
</beans>
